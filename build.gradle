buildscript {
    ext {
        kotlinVersion = '1.6.21'
        springBootVersion = '2.7.3'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'info.nukoneko.kidspos'
version = '1.0.0'
sourceCompatibility = '1.8'

ext['thymeleaf.version'] = '3.0.15.RELEASE'
ext['thymeleaf-layout-dialect.version'] = '3.1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.enigmabridge:hibernate4-sqlite-dialect:0.1.2"
    implementation 'org.xerial:sqlite-jdbc'
    implementation 'org.webjars:jquery:3.6.0'
    implementation 'org.webjars:jquery-ui:1.13.2'
    implementation 'com.itextpdf:itext7-core:7.2.3'
    implementation 'com.google.zxing:core:3.5.1'
    implementation 'com.google.zxing:javase:3.5.1'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

bootJar {
    manifest {
        attributes 'Start-Class': 'info.nukoneko.kidspos.server.ServerApplicationKt'
    }
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

task cleanJar {
    doLast {
        project.file('app.jar').delete()
    }
}
