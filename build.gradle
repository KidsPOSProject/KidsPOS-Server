buildscript {
    ext {
        kotlinVersion = '2.0.21'
        springBootVersion = '3.2.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.23.8")
    }
}

plugins {
    id 'org.jlleitschuh.gradle.ktlint' version '12.1.2'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'io.gitlab.arturbosch.detekt'

group = 'info.nukoneko.kidspos'
version = '1.0.0'

// Java toolchain configuration
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Thymeleaf version managed by Spring Boot 3.x

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.hibernate.orm:hibernate-community-dialects:6.3.1.Final"
    implementation 'org.xerial:sqlite-jdbc'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.webjars:jquery:3.6.0'
    implementation 'org.webjars:jquery-ui:1.13.2'
    implementation 'com.itextpdf:itext7-core:7.2.5'
    implementation 'com.google.zxing:core:3.5.1'
    implementation 'com.google.zxing:javase:3.5.1'

    // Apache POI for Excel generation
    implementation 'org.apache.poi:poi:5.2.4'
    implementation 'org.apache.poi:poi-ooxml:5.2.4'

    // OpenAPI/Swagger dependencies for API documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.1.0'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '21'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '21'
    }
}

bootJar {
    manifest {
        attributes 'Start-Class': 'info.nukoneko.kidspos.server.ServerApplicationKt'
    }
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from tasks.jar.archiveFile
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

task cleanJar {
    doLast {
        project.file('app.jar').delete()
    }
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }

        rule {
            element = 'CLASS'
            includes = ['info.nukoneko.kidspos.server.service.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
    }
    systemProperty 'spring.profiles.active', 'test'
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ServerApplicationKt*',
                    '**/config/**',
                    '**/dto/**',
                    '**/entity/**',
                    '**/exception/**'
            ])
        }))
    }
}

// Detekt configuration for static code analysis
detekt {
    buildUponDefaultConfig = true
    allRules = false
    config = files("$projectDir/config/detekt/detekt.yml")
    baseline = file("$projectDir/config/detekt/baseline.xml")
    parallel = true

    reports {
        html.required = true
        xml.required = false
        txt.required = false
    }
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt).configureEach {
    jvmTarget = "21"
    exclude("**/test/**")
    exclude("**/build/**")
    exclude("**/*.kts")
}

// Ktlint configuration
ktlint {
    version = "1.5.0"
    debug = false
    verbose = false
    android = false
    outputToConsole = true
    outputColorName = "RED"
    ignoreFailures = false
    enableExperimentalRules = false
    filter {
        exclude("**/build/**")
        exclude("**/generated/**")
    }
}

// Temporarily disabled - coverage requirements
// check.dependsOn jacocoTestCoverageVerification

// カスタムタスク: ポートをクリアしてからアプリケーションを起動
task runWithPortClean(type: Exec) {
    group = 'application'
    description = 'Kill existing process on port 8080 and run the application'

    commandLine 'bash', '-c', '''
        PORT_PID=$(lsof -ti:8080)
        if [ ! -z "$PORT_PID" ]; then
            echo "Killing process on port 8080 (PID: $PORT_PID)"
            kill -9 $PORT_PID
            sleep 2
        fi
        ./gradlew bootRun
    '''
}
